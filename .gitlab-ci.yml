variables:
  APP_VERSION: v0.$CI_PIPELINE_IID

stages:
  - build
  - prepare
  - deploy
  - rollback
  - release

.build_job_template:
  script:
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - echo "Compiling the code..."
    - echo "Compile complete."
    - APP_VERSION=v0.$CI_PIPELINE_IID
    - echo "TAG $APP_VERSION"
    - git tag -a $APP_VERSION -m "Release $APP_VERSION"
    - git push origin $APP_VERSION
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE:$APP_VERSION .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION
  tags:
    - docker-runner

.prepare_job_template:
  stage: prepare
  script:
    - 'export RELEASE_NOTES=$(git log --format="- %s" $(git describe --tags --abbrev=0)..HEAD)'
    - 'echo "$RELEASE_NOTES" > release_notes.env'
  tags:
    - deploy-runner
  artifacts:
    paths:
      - release_notes.env

.release_job_template:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Running release_job for $TAG"
    - echo $(cat release_notes.env)
  tags:
    - deploy-runner
  release:
    tag_name: 'v0.$CI_PIPELINE_IID'
    description: |
      $(cat release_notes.env)

    ref: '$CI_COMMIT_SHA'
  needs:
    - deploy
    - prepare_job

.deploy_template:
  script:
    - echo "Deploying application..."
    - echo "Deploying version $APP_VERSION"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker stop $CI_PROJECT_NAME || true
    - docker rm $CI_PROJECT_NAME || true
    - docker run -d -p 80:80 --name $CI_PROJECT_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:$APP_VERSION
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION
  tags:
    - docker-runner
  after_script:
    - 'if [ "$CI_JOB_STATUS" == "success" ]; then curl -X POST -H "Content-type: application/json" --data "{\"content\":\"Deployment successful! Version: $CI_COMMIT_REF_NAME\"}" $DISCORD_WEBHOOK; fi'
    - 'if [ "$CI_JOB_STATUS" == "failed" ]; then curl -X POST -H "Content-type: application/json" --data "{\"content\":\"Deployment failed! Version: $CI_COMMIT_REF_NAME\"}" $DISCORD_WEBHOOK; fi'

.rollback_template:
  script:
    - echo "Rolling back to the previous version..."
    - ALL_TAGS=($(docker image ls --format '{{.Tag}}' | grep $CI_REGISTRY_IMAGE))
    - SORTED_TAGS=($(echo "${ALL_TAGS[@]}" | tr ' ' '\n' | sort -V -r))
    - PREVIOUS_VERSION=${SORTED_TAGS[1]}
    - echo "TAG APP_VERSION $APP_VERSION"
    - echo "TAG PREVIOUS_VERSION $PREVIOUS_VERSION"
    - DOCKER_IMAGE_NAME=$CI_REGISTRY_IMAGE:$PREVIOUS_VERSION
    - docker stop $CI_PROJECT_NAME || true
    - docker rm $CI_PROJECT_NAME || true
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DOCKER_IMAGE_NAME || true
    - docker run -d -p 80:80 --name $CI_PROJECT_NAME $DOCKER_IMAGE_NAME
    - 'curl -X POST -H "Content-type: application/json" --data "{\"content\":\"Rollback successful! Version: $DOCKER_IMAGE_NAME\"}" $DISCORD_WEBHOOK; '
  tags:
    - docker-runner

include:
  - local: build-stage.yml
  - local: deploy-stage.yml
  - local: rollback-stage.yml
  - local: prepare-stage.yml
  - local: release-stage.yml
